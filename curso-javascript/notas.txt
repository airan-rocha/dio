comando do git para restaurar commit

git log --oneline  //para pegar o código do commit

git reset código_commit

git restore *     //para restaurar todos os arquivos para a versão do commit atual.

######

Comando git para adcionar/trocar servidor remote

git remote -v     //para ver o endereço do servidores remotos caso haja

git remote remove origin  // para remover o atual servidor remote, origin é a variável com o endereço

git remote add origin http://...  //adiciona a variável origin com o endereço do servidor remote

git branch -v  //para ver o nome da branch atual

git branch -M "main"  //para alterar o nome da branch, no caso para main

git push origin main // para enviar os arquivos para o servido remoto

*****************************

Design patterns são soluções reutilizáveis que não se limitam a um unico problema.
Elas podem ser reutilizadas para diversos tipo de problemas.

Patterns mais utilizados:
-factory
-singleton
-decorator
-observer
-module


Criando Arrays

var nome = Array();

unshift() = insere o item no inicio do array
push() = insere o item no final do array
shift() = remove o primeiro item do array
pop() = remove o último item do array
splice(index, 1) = remove o item do array apartir do index
splice(2, 1, "first") = irá alterar o item 3 do array para "first"
slice() = fatiar, remove itens do array.

arr = [1,2,3,4,5];

arr.slice(2) //3 4 5   - irá retornar a partir do array 3
arr.slice(-2)  //4 5 - negativo irá retornar de trás para frente
arr.slice(2,3) //3  - irá retornar o indice 2 até a posição 3 do array
arr.map((value) => value * 2) //2,4,6,8,10 - irá retornar os valores do indice por 2
arr.reverse()  //5,4,3,2,1


var numeros = [1,2,3,[4,5,[6,7]]];

console.log(numeros); // [ 1, 2, 3, [ 4, 5, [ 6, 7 ] ] ]

console.log(numeros.flat(2));  // [1, 2, 3, 4, 5, 6, 7] - plano: irá deixar os sub-arrays no mesmo nível dos arrays.


*****************************
Arrow function

var sum = (a, b) => a + b;

var sum = (a, b = 0) => a + b;  //nesse caso o parametro b de um valor default de 0, ou seja caso o parametro b não seja passado a função retornará apenas o valor de a pois a + 0 = a


*****************************
Parâmetro Rest:   ...arguments

sintaxe: array.reduce(callback( acumulador, valorAtual[, index[, array]] )[, valorInicial]))

var sum = (...ags) => { //...argumento: aceita vários argumentos
    return ags.reduce((acumulador, valorAtual) => acumulador + valorAtual); //(reduce) reduzir: com esse método executando a função reducer, passada por mim, irá retornar a soma de todos os argumantos passados na função.
}

console.log(sum(3,2,1));


var mult = (...args) => args.reduce((acc, value) => acc * value, 1); //neste caso o value teve o valor inicial definido como 1, assim se for passado apenas um argumento ele será multiplicado por 1.

console.log(mult(3, 2, 3));

*****************************
Sintaxe de Espalhamento (Spread syntax) 


var str = (...arg) => {
    console.log(arg);
}

var texto = "DigitalInovationOne";
var msg = '- Eu curto';

str(...texto);
str(...texto, ...msg);

*****************************
Destruturing - desestruturação

var frutas = ['prata', 'gala', 'grauda'];
var [banana, maca, laranja] = frutas;  //cada variável recebe um elemento do array

var frutas = ['prata', 'gala', 'grauda', ['papaia']];  //array de entro de um array
var [banana, maca, laranja, [mamao]] = frutas;  //nesse caso a variável mamao tem que ficar entre chaves para mostrar que irar acessar um sub-array
console.log(banana, maca, laranja, mamao);  

var pessoa = {cabelo: "grande", olho: "azul"};
var {cabelo, olho} = pessoa;  //cada variável recebe um elemento do objeto



*****************************
symbol é um identificador único. Ele aceita um identificador tipo "string", 
ele serve apenas para sabermos do que o symbol se trata.

const uniqueId = Symbol("hello");
const uniqueId2 = Symbol("hello");

console.log(uniqueId);

console.log(uniqueId == uniqueId2);  //irá retornar false mesmo tendo o mesmo identificador string, pois cada symbol é unico.

*****************************
Generator (função com pausa)- controla a execução da função:

function* gen() {
    yield 1;    //a palavra reservada yield faz uma pausa na execução
    yield 2; 
    yield 3;
};

var value = gen();

console.log(value.next())  //cada .next() pula para o próximo yield;
console.log(value.next())
console.log(value.next())

------------------------------
function* naturalNumbers(){
    let number = 0;
    while(true){        //loop infinito - só será executado quando for chamado no .nex() e será retornado cada número por causa do incremento.
        yield number;
        number++;
    }
}

const it2 = naturalNumbers();

console.log(it2.next());
console.log(it2.next());
console.log(it2.next());
console.log(it2.next());


*********************************
callback and promises

promise (promessa) é processamento assincrono, que representa um valor que poderá estar disponível agora, no futuro ou nunca.  


*********************************
Ferramentas para testar meu código

Mocha - estrutura de testes javascript para node.js; 
chai - biblioteca para trabalhar com o Mocha;
sinon - biblioteca de suporte chamada;
